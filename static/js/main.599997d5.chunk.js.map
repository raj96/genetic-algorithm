{"version":3,"sources":["components/Navbar.js","components/GeneticAlgo/Gene.js","components/GeneticAlgo/DNA.js","components/GeneticAlgo/Population.js","components/bodyContainer.js","App.js","reportWebVitals.js","index.js"],"names":["style","makeStyles","theme","navbarFooter","height","width","backgroundColor","deepOrange","navbar","NavBar","classes","AppBar","className","elevation","Toolbar","Typography","variant","Gene","createDNAValue","size","dnaVal","i","randomGenome","randomVal","Math","floor","random","String","fromCharCode","DNA","geneSize","value","score","this","targetString","length","pow","charCodeAt","Infinity","dna","mutationRate","midPoint","newValue","mRate","index","substr","mutate","Population","populationSize","bestDna","setBestDna","population","cleanseString","console","log","createInitialPopulation","string","newString","char","push","calculateScores","minScore","forEach","calculateScore","newPopulation","crossOver","InputSection","setters","setCurrentGen","setGenLog","generation","useState","setMutationRate","setPopulation","textInputRef","useRef","Grid","container","spacing","justify","marginBottom","item","xs","alignItems","TextField","fullWidth","label","inputRef","ref","current","Button","color","onClick","loop","setTimeout","matePopulation","prevLog","startGenAlgo","Divider","orientation","flexItem","id","Slider","aria-labelledby","min","max","step","marks","valueLabelDisplay","onChange","_","val","valueLabelFormat","ProgressSection","getters","currentGen","genLog","margin","Card","CardHeader","title","action","CardContent","multiline","disabled","rowsMax","BodyContainer","Container","marginTop","maxWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.599997d5.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { deepOrange } from \"@material-ui/core/colors\";\r\n\r\nlet style = makeStyles((theme) => {\r\n  return {\r\n    navbarFooter: {\r\n      height: \"25vh\",\r\n      width: \"100%\",\r\n      backgroundColor: deepOrange[900],\r\n    },\r\n    navbar: {\r\n      backgroundColor: deepOrange[900],\r\n    },\r\n  };\r\n});\r\n\r\nfunction NavBar() {\r\n  const classes = style();\r\n  return (\r\n    <>\r\n      <AppBar className={classes.navbar} elevation={0}>\r\n        <Toolbar>\r\n          <Typography variant=\"h5\">Genetic Algorithm</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.navbarFooter}></div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","class Gene {\r\n  createDNAValue = ({ size }) => {\r\n    let dnaVal = \"\";\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      dnaVal += this.randomGenome();\r\n    }\r\n\r\n    return dnaVal;\r\n  };\r\n\r\n  randomGenome() {\r\n    const base = 97;\r\n    const randomVal = Math.floor(Math.random() * 27);\r\n\r\n    if (randomVal === 26) return \" \";\r\n    return String.fromCharCode(base + randomVal);\r\n  }\r\n}\r\n\r\nexport default Gene;\r\n","import Gene from \"./Gene\";\r\n\r\nclass DNA {\r\n  value = \"\";\r\n  score = 0;\r\n\r\n  constructor({ geneSize, value }) {\r\n    if (value) {\r\n      this.value = value;\r\n    } else {\r\n      this.value = new Gene().createDNAValue({ size: geneSize });\r\n    }\r\n  }\r\n\r\n  calculateScore(targetString) {\r\n    if (targetString.length === this.value.length) {\r\n      for (let i = 0; i < targetString.length; i++) {\r\n        this.score += Math.pow(\r\n          this.value.charCodeAt(i) - targetString.charCodeAt(i),\r\n          2\r\n        );\r\n      }\r\n    } else this.score = Infinity;\r\n\r\n    return this.score;\r\n  }\r\n\r\n  crossOver(dna, mutationRate) {\r\n    let mutate = (newValue, mRate) => {\r\n      if (Math.random() < mRate) {\r\n        let index = Math.floor(Math.random() * newValue.length);\r\n        return (\r\n          newValue.substr(0, index) +\r\n          new Gene().randomGenome() +\r\n          newValue.substr(index + 1)\r\n        );\r\n      }\r\n      return newValue;\r\n    };\r\n\r\n    // if (this.value === dna.value) {\r\n    //   return new DNA({\r\n    //     value: new Gene().createDNAValue({ size: this.value.length }),\r\n    //   });\r\n    // }\r\n\r\n    let midPoint = Math.floor(Math.random() * this.value.length);\r\n    let newValue = mutate(\r\n      this.value.substr(0, midPoint) + dna.value.substr(midPoint),\r\n      mutationRate / 100\r\n    );\r\n\r\n    return new DNA({ value: newValue });\r\n  }\r\n}\r\n\r\nexport default DNA;\r\n","import DNA from \"./DNA\";\r\n\r\nclass Population {\r\n  populationSize = 300;\r\n  // matingPoolSize = 200;\r\n  mutationRate = 25; //Percent\r\n\r\n  targetString = \"\";\r\n  bestDna = \"\";\r\n  setBestDna = null;\r\n\r\n  population = [];\r\n\r\n  constructor({ targetString, populationSize, mutationRate }) {\r\n    this.targetString = this.cleanseString(targetString);\r\n    this.populationSize = populationSize;\r\n    this.mutationRate = mutationRate;\r\n\r\n    console.log(\r\n      `Population initialized with ${this.populationSize} DNAs and ${this.mutationRate}% mutation rate`\r\n    );\r\n\r\n    this.createInitialPopulation();\r\n  }\r\n\r\n  cleanseString(string) {\r\n    let newString = \"\";\r\n\r\n    for (let char of string) {\r\n      if ((char >= \"a\" && char <= \"z\") || char === \" \") {\r\n        newString += char;\r\n      }\r\n\r\n      if (char >= \"A\" && char <= \"Z\") {\r\n        newString += String.fromCharCode(char.charCodeAt(0) + 32);\r\n      }\r\n    }\r\n\r\n    return newString;\r\n  }\r\n\r\n  createInitialPopulation() {\r\n    for (let i = 0; i < this.populationSize; i++) {\r\n      this.population.push(new DNA({ geneSize: this.targetString.length }));\r\n    }\r\n    this.calculateScores();\r\n  }\r\n\r\n  calculateScores() {\r\n    let minScore = Infinity;\r\n\r\n    this.population.forEach((dna) => {\r\n      if (dna.calculateScore(this.targetString) < minScore) {\r\n        minScore = dna.score;\r\n        this.bestDna = dna;\r\n      }\r\n    });\r\n\r\n    //console.log(this.population.sort((dna1, dna2) => dna1.score > dna2.score));\r\n  }\r\n\r\n  matePopulation() {\r\n    let newPopulation = [];\r\n    for (let i = 0; i < this.populationSize; i++) {\r\n      newPopulation.push(\r\n        this.bestDna.crossOver(this.population[i], this.mutationRate)\r\n      );\r\n    }\r\n    this.population = newPopulation;\r\n  }\r\n}\r\n\r\nexport default Population;\r\n","import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useRef, useState } from \"react\";\r\nimport Population from \"./GeneticAlgo/Population\";\r\n\r\nfunction BodyContainer() {\r\n  const style = {\r\n    rootContainer: {\r\n      marginTop: \"-15vh\",\r\n    },\r\n  };\r\n  const [bestDna, setBestDna] = useState(null);\r\n  const [currentGen, setCurrentGen] = useState(0);\r\n  const [genLog, setGenLog] = useState(\"\");\r\n\r\n  return (\r\n    <Container style={style.rootContainer} maxWidth=\"lg\">\r\n      <Card elevation={10}>\r\n        <CardContent>\r\n          <InputSection setters={{ setBestDna, setCurrentGen, setGenLog }} />\r\n          <Divider />\r\n          <ProgressSection getters={{ bestDna, currentGen, genLog }} />\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction InputSection({ setters }) {\r\n  const { setBestDna, setCurrentGen, setGenLog } = setters;\r\n  let generation = 1;\r\n\r\n  const [mutationRate, setMutationRate] = useState(25);\r\n  const [populationSize, setPopulation] = useState(300);\r\n  let textInputRef = useRef();\r\n\r\n  const startGenAlgo = (value) => {\r\n    let population = new Population({\r\n      targetString: value,\r\n      populationSize,\r\n      mutationRate,\r\n    });\r\n    let loop = () => {\r\n      //   if (generation % 10 === 0) console.log(population);\r\n      setTimeout(() => {\r\n        setCurrentGen(generation);\r\n        population.matePopulation();\r\n        population.calculateScores();\r\n        setBestDna(population.bestDna);\r\n        setGenLog((prevLog) => {\r\n          return (\r\n            `Gen ${generation}: ${population.bestDna.value}\\tScore: ${population.bestDna.score}\\n` +\r\n            prevLog\r\n          );\r\n        });\r\n        generation++;\r\n        if (population.bestDna.value !== value) loop();\r\n      }, 10);\r\n    };\r\n    loop();\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!textInputRef.current || !textInputRef.current.value) return;\r\n    setGenLog(\"\");\r\n    setCurrentGen(0);\r\n    setBestDna(null);\r\n\r\n    startGenAlgo(textInputRef.current.value);\r\n  };\r\n\r\n  const mutationSliderMarks = [\r\n    { value: 0, label: \"0%\" },\r\n    { value: 100, label: \"100%\" },\r\n  ];\r\n  const populationSliderMarks = [{ value: 1000, label: \"1000 DNAs\" }];\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      justify=\"space-around\"\r\n      style={{ marginBottom: \"1vh\" }}\r\n    >\r\n      <Grid item xs={5}>\r\n        <Grid container spacing={1} justify=\"space-evenly\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Target text\"\r\n              inputRef={(ref) => (textInputRef.current = ref)}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Divider orientation=\"vertical\" flexItem />\r\n\r\n      <Grid item xs={5}>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Typography id=\"population-slider-label\" variant=\"body1\">\r\n              Population ({`${populationSize} DNAs`})\r\n            </Typography>\r\n            <Slider\r\n              aria-labelledby=\"population-slider-label\"\r\n              value={populationSize}\r\n              min={100}\r\n              max={1000}\r\n              step={10}\r\n              marks={populationSliderMarks}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange={(_, val) => setPopulation(val)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography id=\"mutation-slider-label\" variant=\"body1\">\r\n              Mutation Rate ({`${mutationRate}%`})\r\n            </Typography>\r\n            <Slider\r\n              aria-labelledby=\"mutation-slider-label\"\r\n              value={mutationRate}\r\n              valueLabelFormat={(value) => value + \"%\"}\r\n              min={0}\r\n              max={100}\r\n              step={1}\r\n              marks={mutationSliderMarks}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange={(_, val) => setMutationRate(val)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction ProgressSection({ getters }) {\r\n  const { bestDna, currentGen, genLog } = getters;\r\n\r\n  return (\r\n    <Grid container justify=\"center\" style={{ margin: \"2vh 0vh 2vh 0vh\" }}>\r\n      <Grid item>\r\n        <Typography variant=\"h4\">\r\n          <b>Best DNA:</b> {bestDna?.value}\r\n        </Typography>\r\n      </Grid>\r\n      {/*log section*/}\r\n      <Grid container>\r\n        <Grid item xs={2} />\r\n        <Grid item xs={8}>\r\n          <Card elevation={1}>\r\n            <CardHeader\r\n              title=\"Generation Log\"\r\n              action={`Gen: ${currentGen}`}\r\n            ></CardHeader>\r\n            <CardContent>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                disabled\r\n                rowsMax={15}\r\n                value={genLog}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={2} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default BodyContainer;\r\n","import \"./App.css\";\nimport NavBar from \"./components/Navbar\";\nimport BodyContainer from \"./components/bodyContainer\";\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <BodyContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}