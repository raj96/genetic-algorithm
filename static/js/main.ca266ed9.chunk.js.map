{"version":3,"sources":["components/Navbar.js","components/GeneticAlgo/Gene.js","components/GeneticAlgo/DNA.js","components/GeneticAlgo/Population.js","components/bodyContainer.js","App.js","reportWebVitals.js","index.js"],"names":["style","makeStyles","theme","navbarFooter","height","width","backgroundColor","deepOrange","zIndex","navbar","NavBar","classes","AppBar","className","elevation","position","Toolbar","Typography","variant","Gene","createDNAValue","size","dnaVal","i","randomGenome","randomVal","Math","floor","random","String","fromCharCode","DNA","geneSize","value","score","this","targetString","length","pow","charCodeAt","Infinity","dna","mutationRate","midPoint","newValue","mRate","index","substr","mutate","Population","populationSize","bestDna","setBestDna","population","console","log","createInitialPopulation","push","calculateScores","minScore","forEach","calculateScore","newPopulation","crossOver","InputSection","setters","setCurrentGen","setGenLog","generation","useState","setMutationRate","setPopulation","textInputRef","useRef","Grid","container","spacing","justify","marginBottom","item","xs","alignItems","TextField","fullWidth","label","inputRef","ref","current","Button","color","onClick","loop","setTimeout","matePopulation","prevLog","startGenAlgo","Divider","orientation","flexItem","id","Slider","aria-labelledby","min","max","step","marks","valueLabelDisplay","onChange","_","val","valueLabelFormat","ProgressSection","getters","currentGen","genLog","margin","align","Card","CardHeader","title","action","CardContent","multiline","disabled","rowsMax","BodyContainer","Container","marginTop","maxWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca266ed9.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { deepOrange } from \"@material-ui/core/colors\";\n\nlet style = makeStyles((theme) => {\n  return {\n    navbarFooter: {\n      height: \"25vh\",\n      width: \"100%\",\n      backgroundColor: deepOrange[900],\n      zIndex: 0,\n    },\n    navbar: {\n      backgroundColor: deepOrange[900],\n    },\n  };\n});\n\nfunction NavBar() {\n  const classes = style();\n  return (\n    <>\n      <AppBar className={classes.navbar} elevation={0} position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h5\">Genetic Algorithm</Typography>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.navbarFooter}></div>\n    </>\n  );\n}\n\nexport default NavBar;\n","class Gene {\r\n  createDNAValue = ({ size }) => {\r\n    let dnaVal = \"\";\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      dnaVal += this.randomGenome();\r\n    }\r\n\r\n    return dnaVal;\r\n  };\r\n\r\n  randomGenome() {\r\n    const randomVal = Math.floor(Math.random() * 256);\r\n\r\n    return String.fromCharCode(randomVal);\r\n  }\r\n}\r\n\r\nexport default Gene;\r\n","import Gene from \"./Gene\";\r\n\r\nclass DNA {\r\n  value = \"\";\r\n  score = 0;\r\n\r\n  constructor({ geneSize, value }) {\r\n    if (value) {\r\n      this.value = value;\r\n    } else {\r\n      this.value = new Gene().createDNAValue({ size: geneSize });\r\n    }\r\n  }\r\n\r\n  calculateScore(targetString) {\r\n    if (targetString.length === this.value.length) {\r\n      for (let i = 0; i < targetString.length; i++) {\r\n        this.score += Math.pow(\r\n          this.value.charCodeAt(i) - targetString.charCodeAt(i),\r\n          2\r\n        );\r\n      }\r\n    } else this.score = Infinity;\r\n\r\n    return this.score;\r\n  }\r\n\r\n  crossOver(dna, mutationRate) {\r\n    let mutate = (newValue, mRate) => {\r\n      if (Math.random() < mRate) {\r\n        let index = Math.floor(Math.random() * newValue.length);\r\n        return (\r\n          newValue.substr(0, index) +\r\n          new Gene().randomGenome() +\r\n          newValue.substr(index + 1)\r\n        );\r\n      }\r\n      return newValue;\r\n    };\r\n\r\n    // if (this.value === dna.value) {\r\n    //   return new DNA({\r\n    //     value: new Gene().createDNAValue({ size: this.value.length }),\r\n    //   });\r\n    // }\r\n\r\n    let midPoint = Math.floor(Math.random() * this.value.length);\r\n\r\n    let newDNAValue;\r\n\r\n    if (Math.random() < 0.5) {\r\n      newDNAValue = this.value.substr(0, midPoint) + dna.value.substr(midPoint);\r\n    } else {\r\n      newDNAValue = dna.value.substr(0, midPoint) + this.value.substr(midPoint);\r\n    }\r\n\r\n    let newValue = mutate(newDNAValue, mutationRate / 100);\r\n\r\n    return new DNA({ value: newValue });\r\n  }\r\n}\r\n\r\nexport default DNA;\r\n","import DNA from \"./DNA\";\r\n\r\nclass Population {\r\n  populationSize = 300;\r\n  // matingPoolSize = 200;\r\n  mutationRate = 25; //Percent\r\n\r\n  targetString = \"\";\r\n  bestDna = \"\";\r\n  setBestDna = null;\r\n\r\n  population = [];\r\n\r\n  constructor({ targetString, populationSize, mutationRate }) {\r\n    this.targetString = targetString;\r\n    this.populationSize = populationSize;\r\n    this.mutationRate = mutationRate;\r\n\r\n    console.log(\r\n      `Population initialized with ${this.populationSize} DNAs and ${this.mutationRate}% mutation rate`\r\n    );\r\n\r\n    this.createInitialPopulation();\r\n  }\r\n\r\n  // cleanseString(string) {\r\n  //   let newString = \"\";\r\n\r\n  //   for (let char of string) {\r\n  //     if ((char >= \"a\" && char <= \"z\") || char === \" \") {\r\n  //       newString += char;\r\n  //     }\r\n\r\n  //     if (char >= \"A\" && char <= \"Z\") {\r\n  //       newString += String.fromCharCode(char.charCodeAt(0) + 32);\r\n  //     }\r\n  //   }\r\n\r\n  //   return newString;\r\n  // }\r\n\r\n  createInitialPopulation() {\r\n    for (let i = 0; i < this.populationSize; i++) {\r\n      this.population.push(new DNA({ geneSize: this.targetString.length }));\r\n    }\r\n    this.calculateScores();\r\n  }\r\n\r\n  calculateScores() {\r\n    let minScore = Infinity;\r\n\r\n    this.population.forEach((dna) => {\r\n      if (dna.calculateScore(this.targetString) < minScore) {\r\n        minScore = dna.score;\r\n        this.bestDna = dna;\r\n      }\r\n    });\r\n\r\n    //console.log(this.population.sort((dna1, dna2) => dna1.score > dna2.score));\r\n  }\r\n\r\n  matePopulation() {\r\n    let newPopulation = [];\r\n    for (let i = 0; i < this.populationSize; i++) {\r\n      newPopulation.push(\r\n        this.bestDna.crossOver(this.population[i], this.mutationRate)\r\n      );\r\n    }\r\n    this.population = newPopulation;\r\n  }\r\n}\r\n\r\nexport default Population;\r\n","import {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Container,\n  Divider,\n  Grid,\n  Slider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useRef, useState } from \"react\";\nimport Population from \"./GeneticAlgo/Population\";\n\nfunction BodyContainer() {\n  const style = {\n    rootContainer: {\n      marginTop: \"-25vh\",\n    },\n  };\n  const [bestDna, setBestDna] = useState(null);\n  const [currentGen, setCurrentGen] = useState(0);\n  const [genLog, setGenLog] = useState(\"\");\n\n  return (\n    <Container style={style.rootContainer} maxWidth=\"lg\">\n      <Card elevation={10}>\n        <CardContent>\n          <InputSection setters={{ setBestDna, setCurrentGen, setGenLog }} />\n          <Divider />\n          <ProgressSection getters={{ bestDna, currentGen, genLog }} />\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nfunction InputSection({ setters }) {\n  const { setBestDna, setCurrentGen, setGenLog } = setters;\n  let generation = 1;\n\n  const [mutationRate, setMutationRate] = useState(25);\n  const [populationSize, setPopulation] = useState(300);\n  let textInputRef = useRef();\n\n  const startGenAlgo = (value) => {\n    let population = new Population({\n      targetString: value,\n      populationSize,\n      mutationRate,\n    });\n    let loop = () => {\n      //   if (generation % 10 === 0) console.log(population);\n      setTimeout(() => {\n        setCurrentGen(generation);\n        population.matePopulation();\n        population.calculateScores();\n        setBestDna(population.bestDna);\n        setGenLog((prevLog) => {\n          return (\n            `Gen ${generation}: ${population.bestDna.value}\\t\\tScore: ${population.bestDna.score}\\n` +\n            prevLog\n          );\n        });\n        generation++;\n        if (population.bestDna.score !== 0) loop();\n      }, 10);\n    };\n    loop();\n  };\n\n  const handleClick = () => {\n    if (!textInputRef.current || !textInputRef.current.value) return;\n    setGenLog(\"\");\n    setCurrentGen(0);\n    setBestDna(null);\n\n    startGenAlgo(textInputRef.current.value);\n  };\n\n  const mutationSliderMarks = [\n    { value: 0, label: \"0%\" },\n    { value: 100, label: \"100%\" },\n  ];\n  const populationSliderMarks = [{ value: 1000, label: \"1000 DNAs\" }];\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      justify=\"space-evenly\"\n      style={{ marginBottom: \"1vh\" }}\n    >\n      <Grid item xs={5}>\n        <Grid container spacing={1} justify=\"space-evenly\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Target text\"\n              inputRef={(ref) => (textInputRef.current = ref)}\n            />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n              Submit\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Divider orientation=\"vertical\" flexItem />\n\n      <Grid item xs={4}>\n        <Grid container>\n          <Grid item xs={12}>\n            <Typography id=\"population-slider-label\" variant=\"body1\">\n              Population ({`${populationSize} DNAs`})\n            </Typography>\n            <Slider\n              aria-labelledby=\"population-slider-label\"\n              value={populationSize}\n              min={100}\n              max={1000}\n              step={10}\n              marks={populationSliderMarks}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, val) => setPopulation(val)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography id=\"mutation-slider-label\" variant=\"body1\">\n              Mutation Rate ({`${mutationRate}%`})\n            </Typography>\n            <Slider\n              aria-labelledby=\"mutation-slider-label\"\n              value={mutationRate}\n              valueLabelFormat={(value) => value + \"%\"}\n              min={0}\n              max={100}\n              step={1}\n              marks={mutationSliderMarks}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, val) => setMutationRate(val)}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction ProgressSection({ getters }) {\n  const { bestDna, currentGen, genLog } = getters;\n\n  return (\n    <Grid container justify=\"center\" style={{ margin: \"2vh 0vh 2vh 0vh\" }}>\n      <Grid item>\n        <Typography variant=\"h6\" align=\"center\">\n          <u>\n            <b>Best DNA</b>\n          </u>\n          <br />\n          {bestDna?.value}\n        </Typography>\n      </Grid>\n      {/*log section*/}\n      <Grid container>\n        <Grid item xs={1} />\n        <Grid item xs={10}>\n          <Card elevation={1}>\n            <CardHeader\n              title=\"Generation Log\"\n              action={`Gen: ${currentGen}`}\n            ></CardHeader>\n            <CardContent>\n              <TextField\n                fullWidth\n                multiline\n                disabled\n                rowsMax={15}\n                value={genLog}\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={1} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default BodyContainer;\n","import \"./App.css\";\nimport NavBar from \"./components/Navbar\";\nimport BodyContainer from \"./components/bodyContainer\";\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <BodyContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}